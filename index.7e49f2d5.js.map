{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-93e75a856f12287d.js","node_modules/comlink/src/comlink.ts","src/index.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-4b53507beb4d3823.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"1LzKV\\\":\\\"index.7e49f2d5.js\\\",\\\"3YKzz\\\":\\\"optcarrot.worker.62890690.js\\\"}\"));","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import * as Comlink from \"comlink\";\nimport { OptcarrotWorkerPort, Options } from \"./optcarrot.worker\";\n\nclass NESView {\n  canvasContext: CanvasRenderingContext2D;\n  scalingCanvas: HTMLCanvasElement;\n  scalingContext: CanvasRenderingContext2D;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvasContext = canvas.getContext(\"2d\");\n    this.scalingCanvas = document.createElement(\"canvas\") as HTMLCanvasElement;\n    this.scalingCanvas.width = canvas.width;\n    this.scalingCanvas.height = canvas.height;\n    this.scalingContext = this.scalingCanvas.getContext(\"2d\");\n    this.canvasContext.scale(2, 2);\n  }\n\n  draw(bytes: Uint8Array) {\n    const rgba = new Uint8ClampedArray(bytes.buffer);\n    const image = new ImageData(rgba, 256, 240);\n    this.scalingContext.putImageData(image, 0, 0);\n    this.canvasContext.drawImage(this.scalingCanvas, 0, 0);\n  }\n}\n\nclass NESAudio {\n  context: AudioContext;\n  scheduledTime: number;\n\n  constructor() {\n    this.context = new AudioContext({ sampleRate: 11050 });\n    this.scheduledTime = 0;\n  }\n\n  push(input: Int16Array) {\n    const buffer = this.context.createBuffer(\n      1,\n      input.length,\n      this.context.sampleRate\n    );\n    const bufferSrc = this.context.createBufferSource();\n    const bufferData = buffer.getChannelData(0);\n    const currentTime = this.context.currentTime;\n    for (let i = 0; i < input.length; i++) {\n      bufferData[i] = input[i] / (2 << 15);\n    }\n    bufferSrc.buffer = buffer;\n    bufferSrc.connect(this.context.destination);\n    if (currentTime < this.scheduledTime) {\n      bufferSrc.start(this.scheduledTime);\n      this.scheduledTime += buffer.duration;\n    } else {\n      console.warn(\n        \"Audio buffer underrun :(\",\n        this.scheduledTime - currentTime\n      );\n      bufferSrc.start(currentTime);\n      this.scheduledTime = currentTime + buffer.duration;\n    }\n  }\n}\n\nclass FpsCounter {\n  times: number[];\n  constructor() {\n    this.times = [];\n  }\n  tick(): number {\n    const now = performance.now();\n    while (this.times.length > 0 && this.times[0] <= now - 1000) {\n      this.times.shift();\n    }\n    this.times.push(now);\n    return this.times.length;\n  }\n}\n\nclass LoadProgress {\n  progress: HTMLProgressElement;\n  message: HTMLElement;\n  constructor(progress: HTMLProgressElement, message: HTMLElement) {\n    this.progress = progress;\n    this.progress.max = 1;\n    this.message = message;\n  }\n\n  log(message: string) {\n    this.message.innerText = message;\n  }\n\n  error(message: string) {\n    this.message.innerText = message;\n    this.progress.hidden = true;\n  }\n\n  setProgress(value: number) {\n    this.progress.value = value;\n  }\n\n  hide() {\n    this.progress.hidden = true;\n    this.message.hidden = true;\n  }\n}\n\nconst padCodeFromCode = (code: string) => {\n  switch (code) {\n    case \"KeyZ\":\n      return 0x0; // A\n    case \"KeyX\":\n      return 0x1; // B\n    case \"Enter\":\n      return 0x2; // select\n    case \"Space\":\n      return 0x3; // start\n    case \"ArrowUp\":\n      return 0x04;\n    case \"ArrowDown\":\n      return 0x05;\n    case \"ArrowLeft\":\n      return 0x06;\n    case \"ArrowRight\":\n      return 0x07;\n    default:\n      return null;\n  }\n};\n\nconst deriveOptions: (url: URL) => Options = (url) => {\n  const enableOptRaw = url.searchParams.get(\"opt\");\n  const headlessRaw = url.searchParams.get(\"headless\");\n  const romRaw = url.searchParams.get(\"rom\");\n  return {\n    opt: enableOptRaw === null ? true : enableOptRaw === \"true\",\n    headless: headlessRaw === null ? false : headlessRaw === \"true\",\n    rom: romRaw === null ? \"Lan_Master.nes\" : romRaw,\n  };\n};\n\nconst optcarrot = Comlink.wrap<OptcarrotWorkerPort>(\n  // @ts-ignore\n  new Worker(new URL(\"optcarrot.worker.ts\", import.meta.url), {\n    type: \"module\",\n  })\n);\n\nconst play = async (url: URL, progress: LoadProgress) => {\n  const nesView = new NESView(\n    document.getElementById(\"nes-video\") as HTMLCanvasElement\n  );\n  let nesAudio = null;\n\n  progress.log(\"Initializing Optcarrot...\");\n\n  const fps = new FpsCounter();\n  const fpsIndicator = document.getElementById(\"fps-indicator\");\n  const isAudioEnabledCheckbox = document.getElementById(\n    \"audio-enabled\"\n  ) as HTMLInputElement;\n  let audioEnabled = isAudioEnabledCheckbox.checked;\n\n  isAudioEnabledCheckbox.onclick = () => {\n    audioEnabled = isAudioEnabledCheckbox.checked;\n  };\n  document.addEventListener(\"keydown\", (event) => {\n    const code = padCodeFromCode(event.code);\n    if (code !== null) {\n      event.preventDefault();\n      optcarrot.pushKeyEvent(code, true);\n    }\n  });\n\n  document.addEventListener(\"keyup\", (event) => {\n    const code = padCodeFromCode(event.code);\n    if (code !== null) {\n      optcarrot.pushKeyEvent(code, false);\n    }\n  });\n\n  const options = deriveOptions(url);\n  const render: (bytes: Uint8Array) => void = options.headless\n    ? (_) => {\n        fpsIndicator.innerText = fps.tick().toString();\n      }\n    : (bytes) => {\n        nesView.draw(bytes);\n        fpsIndicator.innerText = fps.tick().toString();\n      };\n\n  optcarrot.init(\n    options,\n    // render\n    Comlink.proxy(render),\n    // playAudio\n    Comlink.proxy((bytes) => {\n      if (!audioEnabled) return;\n      if (nesAudio === null) {\n        nesAudio = new NESAudio();\n      }\n      nesAudio.push(bytes);\n    }),\n    Comlink.proxy((input) => {\n      switch (input.kind) {\n        case \"error\": {\n          progress.error(input.message);\n          break;\n        }\n        case \"message\": {\n          progress.log(input.value);\n          break;\n        }\n        case \"done\": {\n          progress.hide();\n          break;\n        }\n        case \"progress\": {\n          progress.setProgress(input.value);\n          break;\n        }\n      }\n    }),\n  );\n};\n\nconst progress = new LoadProgress(\n  document.getElementById(\"loading-progress\") as HTMLProgressElement,\n  document.getElementById(\"loading-message\")\n);\n\nplay(new URL(window.location.href), progress);\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"3YKzz\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$0e112480d1414235$export$be5234c0b764b6e0","Symbol","val","$0e112480d1414235$export$ab8f1c00731ee83e","Map","$0e112480d1414235$var$isObject","serialize","obj","port1","port2","MessageChannel","port","value","$0e112480d1414235$var$throwMarker","serialized","isError","message","name","stack","assign","obj1","ep","self","callback","ev","data","type","path","argumentList","map","$0e112480d1414235$var$fromWireValue","slice","reduce","prop","rawValue","returnValue1","apply","parent","$0e112480d1414235$export$9b7f6e342a8cbd38","transfers","$0e112480d1414235$var$transferCache","set","undefined","value1","Promise","resolve","catch","then","returnValue","wireValue","transferables","$0e112480d1414235$var$toWireValue","postMessage","removeEventListener","$0e112480d1414235$var$closeEndPoint","start","endpoint","constructor","close","target","isReleased","Proxy","isProxyReleased","$0e112480d1414235$var$requestResponseMessage","p","toString","r","bind","_target","$0e112480d1414235$var$throwIfProxyReleased","_thisArg","rawArgumentList","last","$0e112480d1414235$export$39fb953702b7fcd7","$0e112480d1414235$var$createProxy","$0e112480d1414235$var$processArguments","construct","$0e112480d1414235$export$923f96dd5afa9ce6","processed","v","arr","Array","prototype","concat","WeakMap","handler","canHandle","serializedValue","get","deserialize","msg","$b4e14b6b8da86996$var$NESView","canvas","this","canvasContext","getContext","scalingCanvas","document","createElement","width","height","scalingContext","scale","draw","bytes","rgba","Uint8ClampedArray","buffer","image","ImageData","putImageData","drawImage","$b4e14b6b8da86996$var$NESAudio","context","AudioContext","sampleRate","scheduledTime","push","input","createBuffer","bufferSrc","createBufferSource","bufferData","getChannelData","currentTime","connect","destination","duration","console","warn","$b4e14b6b8da86996$var$FpsCounter","times","tick","now","performance","shift","$b4e14b6b8da86996$var$padCodeFromCode","code","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","location","source","stringify","URL","createObjectURL","Blob","$f5e58b70d10edcb4$var$url","import","meta","url","$f5e58b70d10edcb4$exports","$b4e14b6b8da86996$var$optcarrot","$0e112480d1414235$export$4997ffc0176396a6","Worker","$b4e14b6b8da86996$var$progress","progress","max","log","innerText","error","hidden","setProgress","hide","getElementById","async","nesView","nesAudio","fps","fpsIndicator","isAudioEnabledCheckbox","audioEnabled","checked","onclick","addEventListener","event","preventDefault","pushKeyEvent","options","enableOptRaw","searchParams","headlessRaw","romRaw","opt","headless","rom","$b4e14b6b8da86996$var$deriveOptions","render","_","init","kind","$b4e14b6b8da86996$var$play","window","href"],"version":3,"file":"index.7e49f2d5.js.map"}