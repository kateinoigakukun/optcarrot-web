{"mappings":"imBAsBA,IAAuBA,EACDC,mFArBtB,IAAIC,EAAU,GAoBdF,WAlBkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,KAelCL,WAXiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,MCnBTE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,iIC2NrDC,EAAUC,OAAO,mBACTA,OAAA,sBAAKA,OAAA,0BAAGA,OAAA,oBAAKC,GAAA,iBAAAA,GAAA,OAAAA,GAAA,mBAAAA,EAyErBC,EAAe,IAAAC,IAAA,UAvEjB,WACOF,GAAKG,EAAAH,IAAAA,EAAAF,GAEXM,UAAAC,GACF,MAAAC,MAAAA,EAAAC,MAAAA,GAAA,IAAAC,eAiBC,cAAS,GAET,CACMD,iBAKEE,gBAEkBA,eAIc,WAAEC,GAAAP,EAAAO,IAAAC,KAAAD,aAEhCA,MAAUA,QAAEE,EAqBrB,OArBwBA,EAAAF,aAAAjB,MAAA,CACxBoB,SAAA,EACDH,MAAY,CACNI,QAAWJ,EAAOI,QAMhBC,KAAAL,EAAWK,KAClBC,MAAAN,EAAAM,QAUA,CAAOH,SAAA,EAAEH,MAAAA,GACT,CAAOE,EAAE,iBAGIA,GACX,GAAAA,EAAgBC,QAAU,MAAEzB,OAAS6B,OAAQ,IAAiBxB,MAAjEmB,EAAAF,MAAAI,SAAAF,EAAAF,OACE,MAAKE,EAAUF,sBAkBXQ,EAAAC,EAAAC,yBAEI,WAAY,SAAWC,EAAKC,WAC5BA,EAAAC,KAAA,gBAEFhC,EAAAiC,KAAAA,EAAAC,KAAAA,GAAArC,OAAA6B,OAAA,MACF,eAIEK,EAAAC,KAAAG,cAAA,IAAAC,IAAAC,qBAGEH,EAAMI,MAAQ,GAAI,GAAAC,QAAQ,CAAAzB,EAAI0B,IAAA1B,EAAY0B,SAE3CN,EAAAK,QAAA,CAAAzB,EAAA0B,IAAA1B,EAAA0B,cAEHP,OACE,QACQQ,sBAEyBH,OAAK,GAAA,IAAAD,EAAAN,EAAAC,KAAAb,UAAC,EACtC,UACD,QACFuB,EAAAD,EAAAE,MAAAC,EAAAT,GAEI,UAEF,gBAEA,IAAAM,KAAAN,IAGJ,qBAAwB,CAAiB,MAAApB,MAAAA,EAAAC,MAAAA,GAAA,IAAAC,eAC1C4B,EAAAlB,EAAAX,GA6JLF,EA3JOC,EA2JP+B,EA3JO,CACQ/B,GA2JbgC,EAA8BC,IAAAlC,EAAAgC,GA7JZJ,EA+Jd5B,EA7JoC,MAE/B,IAAE,UACE4B,OAAWO,EACf,MAAiB,QAAW,cAC3BC,MAEF/B,MAAG+B,EACH9B,CAAAA,GAAc,OAkJxBN,EAAAgC,EA/IUK,QAAAC,QAAAV,GAAAW,OAAAlC,IAEN,CAEHA,MAAAA,EAEQC,CAAAA,GAAgC,MAExCkC,MAAAC,IAEQ,MAAAC,EAAAC,GAAcC,EAAvBH,GACM3B,EAAA+B,YAAA9D,OAAA6B,OAAA7B,OAAc6B,OAAW,GAC9B8B,GAAA,CAEexD,GAAAA,IACPyD,GACR,YAAAxB,IAGKL,EAAUgC,oBACgD,UAAA9B,GAE/D+B,EAAAjC,UAQCA,EAAMkC,OAAAlC,EAAAkC,mBAMIC,aAJNA,SACa,kBAALC,YAAKxC,OAIiBuC,IAAQA,EAAAE,mBACjCrC,EAAAsC,YACCtC,EAAA,GAAAsC,cAEDC,QACF,MAAA,IAAAjE,MAAA,yDAIC0B,EAAOM,EAAA,GAAAgC,EAAA,qBAAqB,UAEpB,IAAAE,MAAAF,EAAuB,OAC/B1B,QACgC6B,mBAC3BC,EAAc1C,EAAA,CACrBK,KAAS,UACVC,KAAAA,EAAAE,KAAAmC,GAAAA,EAAAC,eAC0BlB,MAAI,KAAMO,EAAAjC,GAACyC,GAAA,KAGtC,GAAA,SAAA7B,EAAA,oCAIA,MAAOiC,EAAAH,EAAP1C,EAAA,CAGQK,KAAJ,MACIC,KAAGA,EAAAE,KAAAmC,GAAAA,EAAAC,oBAAanC,GAAA,OAAOoC,EAACnB,KAAOoB,KAAAD,YAC9B7C,EAAA,IAEPM,EAEHM,SAGCmC,EAAUnC,EAAGC,GACbmC,EAAsBP,mBAMtB,OAAIC,EACK1C,EAAA,CAETK,KAAO,MACPC,KAAO,IAGHA,EACIM,0BAGNrB,MAAAA,GAEHsC,GAAAH,KAAAjB,UAECsC,EAAAE,EAAAC,GACAF,EAAsCP,GACtC,MAAAU,EAAO7C,EAAAA,EAAAnC,OAAA,MAGHgF,IAAAC,EAAA,OAAAV,EAAA1C,EAAA,CACAK,KAAM,qBAEP,GACD,SAAA8C,EACA,OAAKE,EAAarD,EAAAM,EAAAI,MAAA,GAAA,IACrB,MAAAH,EAAAsB,GAAAyB,EAAAJ,GACF,OAAAR,EAAA1C,EAAA,CACMK,KAAA,QACRC,KAAAA,EAAAE,KAAAmC,GAAAA,EAAAC,aAGarC,aAAWA,GACxBsB,GAAAH,KAAAjB,IAGC8C,UAAeR,EAAGG,GACVF,EAAAP,GAAA,MAAUlC,EAAcsB,GAAAyB,EAAAJ,eAAI7C,KAAA,0CACrCE,aAAAA,GAEKsB,GAAAH,KAAAjB,MAGJ,OAAO+C,WAI0CF,EAAA/C,GAClD,MAAAkD,EAAAlD,EAAAC,IAAAsB,SAEe,CAKd2B,EAAAjD,KAAAkD,GAAAA,EAAA,MATcC,mBACPC,MAAMC,UAAQC,OAAK/C,MAAA,GAAA4C,SADZA,EAehB,MAACxC,EAAA,IAAA4C,mBAOO7E,iBACEY,OAAAZ,EAAA,MACI,aAYV4C,EAAavC,GACd,IAAA,MAAAK,EAAAoE,KAAAlF,EAAA,GAAAkF,EAAAC,UAAA1E,GAAA,CACF,MAAA2E,EAAArC,GAAAmC,EAAA/E,UAAAM,SAEQ,CACC,CACNc,KAAA,UACET,KAAOA,EACTL,MAAA2E,MAUF,MAAO,CACL,CACG7D,KAAA,MACDd,MAAOA,KAIQ4E,IAAA5E,IAAA,aAKjBkB,EAAclB,YAAGc,MAAE,IAAK,UACzB,OAAAvB,EAAAqF,IAAA5E,EAAAK,MAAAwE,YAAA7E,EAAAA,OACF,IAAA,MAEQ,OAAAA,EAAAA,OAKT,SAAAmD,EAAA1C,EAAAqE,EAAAnD,iVCjiBaoD,cAECC,GACVC,KAAKD,OAASA,EAGhBE,KAAKC,EAAcC,GACjBH,KAAKD,OAAOE,KAAK,IAAIG,WAAW,CAACF,EAAMC,EAAU,EAAI,SAAKtD,ICR9D,MACawD,EASbC,6BAC+BC,EAAU1E,GACrC,IAAKA,EAAK2E,kBACR,KAAM,iCAER,IAAIC,EAAQ,GAAKF,EAAW,GAAK1E,EAAK2E,kBACtC,OAAO,IAAIE,kBAAkBD,GAQjC7C,YACc+C,EAAK9E,GACf,IAAK+E,YAAYC,UAAUC,cAAcjF,SACZgB,IAA3BhB,EAAK2E,kBACL,KAAM,uDAQRR,KAAKe,MAAQlF,EACbmE,KAAKgB,WAAaL,EAAIM,WAAa,GAAKpF,EAAK2E,kBAC7CR,KAAKkB,IAAMP,EACXX,KAAKmB,UAAY,IAAIC,YAAYpB,KAAKkB,IAAK,EAAG,GAC9ClB,KAAKqB,SAAW,IAAID,YAAYpB,KAAKkB,IAAK,EAAG,GAC7ClB,KAAKsB,QAAU,IAAIzF,EAAKmE,KAAKkB,IAAK,EAAGlB,KAAKgB,WAM5CnF,OACE,OAAOmE,KAAKe,MAAM3F,KAUpB6E,KAAKsB,EAAU5H,GACb,IAAI6H,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GACjCM,EAAKF,QAAQC,KAAK1B,KAAKmB,UAAW,GAEtC,IAAKQ,EAAK,GAAK3B,KAAK4B,qBAAuBJ,EAEzC,OAAO,EAGT,IAAIK,EAAgBhF,MAAVlD,EAAsBA,EAAS4H,EAAS5H,OAElD,IAAImI,EAAWC,KAAKC,IAAIhC,KAAKiC,iBAAiBT,EAAIG,GAAKE,GACnDK,EAAaH,KAAKC,IAAIhC,KAAK4B,oBAAsBD,EAAIG,GACrDK,EAAcL,EAAWI,EAY7B,OAVAlC,KAAKoC,MAAMb,EAAU,EAAGvB,KAAKsB,QAASK,EAAIO,GAC1ClC,KAAKoC,MAAMb,EAAUW,EAAYlC,KAAKsB,QAAS,EAAGa,GAGlDV,QAAQY,MACNrC,KAAKmB,UACL,GACCQ,EAAKG,GAAY9B,KAAK4B,qBAGlBE,EAoBTQ,cAAcC,EAAQC,GACpB,IAAIhB,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GACjCM,EAAKF,QAAQC,KAAK1B,KAAKmB,UAAW,GAEtC,IAAKQ,EAAK,GAAK3B,KAAK4B,qBAAuBJ,EAEzC,OAAO,EAGT,IAAIM,EAAWC,KAAKC,IAAIhC,KAAKiC,iBAAiBT,EAAIG,GAAKY,GACnDL,EAAaH,KAAKC,IAAIhC,KAAK4B,oBAAsBD,EAAIG,GACrDK,EAAcL,EAAWI,EAe7B,OATAM,EAHqB,IAAIxC,KAAKe,MAAMf,KAAKsB,QAAQvB,OAAQ,EAAS,EAAL4B,EAAQO,GAC/C,IAAIlC,KAAKe,MAAMf,KAAKsB,QAAQvB,OAAQ,EAAOoC,IAKjEV,QAAQY,MACNrC,KAAKmB,UACL,GACCQ,EAAKG,GAAY9B,KAAK4B,qBAGlBE,EAcTW,IAAIlB,EAAU5H,GACZ,IAAI6H,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GACjCM,EAAKF,QAAQC,KAAK1B,KAAKmB,UAAW,GAEtC,GAAIQ,GAAMH,EACR,OAAO,EAGT,IAAIK,EAAgBhF,MAAVlD,EAAsBA,EAAS4H,EAAS5H,OAElD,IAAI+I,EAAUX,KAAKC,IAAIhC,KAAK2C,gBAAgBnB,EAAIG,GAAKE,GAEjDK,EAAaH,KAAKC,IAAIhC,KAAK4B,oBAAsBJ,EAAIkB,GACrDP,EAAcO,EAAUR,EAO5B,OALAlC,KAAKoC,MAAMpC,KAAKsB,QAASE,EAAID,EAAU,EAAGW,GAC1ClC,KAAKoC,MAAMpC,KAAKsB,QAAS,EAAGC,EAAUW,EAAYC,GAElDV,QAAQY,MAAMrC,KAAKqB,SAAU,GAAIG,EAAKkB,GAAW1C,KAAK4B,qBAE/Cc,EAQTE,QACE,IAAIpB,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GAGrC,OAFSI,QAAQC,KAAK1B,KAAKmB,UAAW,IAEzBK,EAOfqB,OACE,IAAIrB,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GAGrC,OAFSI,QAAQC,KAAK1B,KAAKmB,UAAW,GAEzB,GAAKnB,KAAK4B,qBAAuBJ,EAOhDjB,WACE,OAAOP,KAAKgB,UAAY,EAQ1B8B,iBACE,IAAItB,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GACjCM,EAAKF,QAAQC,KAAK1B,KAAKmB,UAAW,GACtC,OAAOnB,KAAK2C,gBAAgBnB,EAAIG,GAQlCoB,kBACE,IAAIvB,EAAKC,QAAQC,KAAK1B,KAAKqB,SAAU,GACjCM,EAAKF,QAAQC,KAAK1B,KAAKmB,UAAW,GACtC,OAAOnB,KAAKiC,iBAAiBT,EAAIG,GAUnCgB,gBAAgBnB,EAAIG,GAClB,OAAQA,EAAK3B,KAAK4B,oBAAsBJ,GAAMxB,KAAK4B,oBAQrDK,iBAAiBT,EAAIG,GACnB,OAAO3B,KAAKO,WAAaP,KAAK2C,gBAAgBnB,EAAIG,GAQpDC,oBACE,OAAO5B,KAAKgB,UAadoB,MAAMY,EAAOC,EAAcC,EAAQC,EAAeC,GAChD,IAAK,IAAI1J,EAAI,EAAGA,EAAI0J,EAAM1J,IACxBwJ,EAAOC,EAAgBzJ,GAAKsJ,EAAMC,EAAevJ,UC1QvD2J,EAAc,IAAAC,IAAuBvJ,EAAA,SAAAiD,QAA6C,SAAOuG,OAAAC,KAAAC,KAAGrF,WCKxF,kBAAmBsF,UAGrBA,UAAUC,cAAc3J,SAAQqJ,GAAsCnG,MACpE,SAAU0G,GACRC,QAAQC,IAAI,sCAAuCF,EAAaG,OAE5DH,EAAaI,SAAWN,UAAUC,cAAcM,YAChDC,OAAOC,SAASC,YAGtB,SAAUC,GACRR,QAAQC,IAAI,8CAA+CO,MAI/DR,QAAQS,KAAK,4CCnBfC,EAAiB,SAAUC,EAAWC,EAAQC,GAC5C,GAAID,IAAWhJ,KAAK0I,SAASM,OAG3B,OAAOD,EAGP,IAAIG,EAASD,EAAQ,UAAYzK,KAAK2K,UAAUJ,GAAa,IAAM,iBAAmBvK,KAAK2K,UAAUJ,GAAa,KAClH,OAAOlB,IAAIuB,gBAAgB,IAAIC,KAAK,CAACH,GAAS,CAC5C9I,KAAM,6BCVZ,IAAIkJ,EAAG,IAAAzB,IAAuBvJ,EAAA,SAAAiD,QAA6C,SAAOuG,OAAAC,KAAAC,KAClFuB,EAAiBT,EAAUQ,EAAI3G,WAAY2G,EAAIN,QAAQ,GFsBvD,MAAMQ,EAAYC,EAEhB,IAAIC,OAAMH,UAKNI,cAKUC,GACRrF,KAAKsF,cAAgBD,EAAOE,WAAW,MACvCvF,KAAKwF,cAAgBC,SAASC,cAAc,UAC5C1F,KAAKwF,cAAcG,MAAQN,EAAOM,MAClC3F,KAAKwF,cAAcI,OAASP,EAAOO,OACnC5F,KAAK6F,eAAiB7F,KAAKwF,cAAcD,WAAW,MACpDvF,KAAKsF,cAAcQ,MAAM,EAAG,GAGhCC,KAAKtF,GACD,MAAMuF,EAAO,IAAIC,kBAAkBxF,EAAMV,QACnCmG,EAAQ,IAAIC,UAAUH,EAAM,IAAK,KACvChG,KAAK6F,eAAeO,aAAaF,EAAO,EAAG,GAC3ClG,KAAKsF,cAAce,UAAUrG,KAAKwF,cAAe,EAAG,UAItDc,gBAKEtG,KAAKuG,QAAU,IAAIC,aAAa,CAAEC,WAAY,QAC9CzG,KAAK0G,cAAgB,EAGzBzG,KAAK+C,GACD,MAAMjD,EAASC,KAAKuG,QAAQI,aAAa,EAAG3D,EAAMrJ,OAAQqG,KAAKuG,QAAQE,YACjEG,EAAY5G,KAAKuG,QAAQM,qBACzBC,EAAa/G,EAAOgH,eAAe,GACnCC,EAAchH,KAAKuG,QAAQS,YACjC,IAAK,IAAItN,EAAI,EAAGA,EAAIsJ,EAAMrJ,OAAQD,IAC9BoN,EAAWpN,GAAKsJ,EAAMtJ,GAAM,MAEhCkN,EAAU7G,OAASA,EACnB6G,EAAUK,QAAQjH,KAAKuG,QAAQW,aAC3BF,EAAchH,KAAK0G,eACnBE,EAAUlJ,MAAMsC,KAAK0G,eACrB1G,KAAK0G,eAAiB3G,EAAOoH,WAE7BtD,QAAQS,KAAK,2BAA4BtE,KAAK0G,cAAgBM,GAC9DJ,EAAUlJ,MAAMsJ,GAChBhH,KAAK0G,cAAgBM,EAAcjH,EAAOoH,iBAKhDC,gBAGEpH,KAAKqH,MAAQ,GAEjBC,OACI,MAAMC,EAAMC,YAAYD,WACjBvH,KAAKqH,MAAM1N,OAAS,GAAKqG,KAAKqH,MAAM,IAAME,EAAM,KACrDvH,KAAKqH,MAAMI,QAGb,OADAzH,KAAKqH,MAAMpH,KAAKsH,GACTvH,KAAKqH,MAAM1N,QAI1B,MAAM+N,EAAkBC,IACpB,OAAQA,GACJ,IAAK,OAAQ,OAAO,EACpB,IAAK,OAAQ,OAAO,EAGpB,IAAK,UAAW,OAAO,EACvB,IAAK,YAAa,OAAO,EACzB,IAAK,YAAa,OAAO,EACzB,IAAK,aAAc,OAAO,UACjB,OAAO,OAIdC,WACN,MAAMC,EAAU,IAAIzC,EAAQK,SAASqC,eAAe,cAC9CC,EAAiB1H,EAAW2H,sBAAsB,KAAM5H,YACxD6H,EAAmB,IAAInI,EAAiB,IAAIO,EAAW0H,EAAgB3H,aAC7E,IAAI8H,EAAW,KAEfrE,QAAQC,IAAI,6BAEZ,MAAMqE,EAAM,IAAIf,EACVgB,EAAe3C,SAASqC,eAAe,iBACvCO,EAAyB5C,SAASqC,eAAe,iBACvD,IAAIQ,EAAeD,EAAuBE,QAE1CF,EAAuBG,QAAO,KAC1BF,EAAeD,EAAuBE,SAE1C9C,SAASgD,iBAAiB,WAAYC,IAClC,MAAMxI,EAAOwH,EAAegB,EAAMf,KACrB,OAATzH,GACA+H,EAAiBhI,KAAKC,GAAM,MAIpCuF,SAASgD,iBAAiB,SAAUC,IAChC,MAAMxI,EAAOwH,EAAegB,EAAMf,KACrB,OAATzH,GACA+H,EAAiBhI,KAAKC,GAAM,MAIpC+E,EAAU0D,KAER3J,GAAeyB,IACboH,EAAQ9B,KAAKtF,GACb2H,EAAaQ,UAAYT,EAAIb,OAAOlJ,cAGtCY,GAAeyB,IACR6H,IACY,OAAbJ,IACAA,EAAW,IAAI5B,GAEnB4B,EAASjI,KAAKQ,OAEhBwH,EAAiBlI,OAAOmB,MAI9B2H","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-4f822d0174fdc05d.js","node_modules/comlink/src/comlink.ts","src/key-event-bus.ts","node_modules/ringbuf.js/js/ringbuf.js","node_modules/@parcel/runtime-js/lib/runtime-66bff70772fe4b34.js","src/index.ts","node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","node_modules/@parcel/runtime-js/lib/runtime-4b53507beb4d3823.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"1LzKV\\\":\\\"index.c98e093b.js\\\",\\\"7yeQP\\\":\\\"sw.js\\\",\\\"3YKzz\\\":\\\"optcarrot.worker.13184cd9.js\\\"}\"));","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import { RingBuffer } from \"ringbuf.js\";\n\nconst DATA_SIZE_FIELD_OFFSET = 0;\nconst DATA_LOCK_FIELD_OFFSET = 1;\nconst DATA_BEGIN_OFFSET = 3;\nconst KEY_EVENT_SIZE = 4;\n\nexport class KeyEventProducer {\n  buffer: RingBuffer;\n  constructor(buffer: RingBuffer) {\n    this.buffer = buffer;\n  }\n\n  push(code: number, pressed: boolean) {\n    this.buffer.push(new Uint8Array([code, pressed ? 1 : 0]), undefined);\n  }\n}\n\nexport class KeyEventConsumer {\n  buffer: RingBuffer;\n  constructor(buffer: RingBuffer) {\n    this.buffer = buffer;\n  }\n\n  consume(): [number, boolean] | null {\n    const bytes = new Uint8Array(2);\n    const read = this.buffer.pop(bytes, 2);\n    if (read === 0) return null;\n    return [bytes[0], bytes[1] === 1];\n  }\n}\n","/** The base RingBuffer class\n *\n * A Single Producer - Single Consumer thread-safe wait-free ring buffer.\n *\n * The producer and the consumer can be on separate threads, but cannot change roles,\n * except with external synchronization.\n */\nexport class RingBuffer {\n  /** Allocate the SharedArrayBuffer for a RingBuffer, based on the type and\n   * capacity required\n   * @param {number} capacity The number of elements the ring buffer will be\n   * able to hold.\n   * @param {TypedArray} type A typed array constructor, the type that this ring\n   * buffer will hold.\n   * @return {SharedArrayBuffer} A SharedArrayBuffer of the right size.\n   * @static\n   */\n  static getStorageForCapacity(capacity, type) {\n    if (!type.BYTES_PER_ELEMENT) {\n      throw \"Pass in a ArrayBuffer subclass\";\n    }\n    var bytes = 8 + (capacity + 1) * type.BYTES_PER_ELEMENT;\n    return new SharedArrayBuffer(bytes);\n  }\n  /**\n   * @constructor\n   * @param {SharedArrayBuffer} sab A SharedArrayBuffer obtained by calling\n   * {@link RingBuffer.getStorageFromCapacity}.\n   * @param {TypedArray} type A typed array constructor, the type that this ring\n   * buffer will hold.\n   */\n  constructor(sab, type) {\n    if (!ArrayBuffer.__proto__.isPrototypeOf(type) &&\n      type.BYTES_PER_ELEMENT !== undefined) {\n      throw \"Pass a concrete typed array class as second argument\";\n    }\n\n    // Maximum usable size is 1<<32 - type.BYTES_PER_ELEMENT bytes in the ring\n    // buffer for this version, easily changeable.\n    // -4 for the write ptr (uint32_t offsets)\n    // -4 for the read ptr (uint32_t offsets)\n    // capacity counts the empty slot to distinguish between full and empty.\n    this._type = type;\n    this._capacity = (sab.byteLength - 8) / type.BYTES_PER_ELEMENT;\n    this.buf = sab;\n    this.write_ptr = new Uint32Array(this.buf, 0, 1);\n    this.read_ptr = new Uint32Array(this.buf, 4, 1);\n    this.storage = new type(this.buf, 8, this._capacity);\n  }\n  /**\n   * @return the type of the underlying ArrayBuffer for this RingBuffer. This\n   * allows implementing crude type checking.\n   */\n  type() {\n    return this._type.name;\n  }\n\n  /**\n   * Push elements to the ring buffer.\n   * @param {TypedArray} elements A typed array of the same type as passed in the ctor, to be written to the queue.\n   * @param {Number} length If passed, the maximum number of elements to push.\n   * If not passed, all elements in the input array are pushed.\n   * @return the number of elements written to the queue.\n   */\n  push(elements, length) {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    if ((wr + 1) % this._storage_capacity() == rd) {\n      // full\n      return 0;\n    }\n\n    var len = length != undefined ? length : elements.length;\n\n    let to_write = Math.min(this._available_write(rd, wr), len);\n    let first_part = Math.min(this._storage_capacity() - wr, to_write);\n    let second_part = to_write - first_part;\n\n    this._copy(elements, 0, this.storage, wr, first_part);\n    this._copy(elements, first_part, this.storage, 0, second_part);\n\n    // publish the enqueued data to the other side\n    Atomics.store(\n      this.write_ptr,\n      0,\n      (wr + to_write) % this._storage_capacity()\n    );\n\n    return to_write;\n  }\n\n  /**\n   * Write bytes to the ring buffer using callbacks. This create wrapper\n   * objects and can GC, so it's best to no use this variant from a real-time\n   * thread such as an AudioWorklerProcessor `process` method.\n   * The callback is passed two typed arrays of the same type, to be filled.\n   * This allows skipping copies if the API that produces the data writes is\n   * passed arrays to write to, such as `AudioData.copyTo`.\n   * @param {number} amount The maximum number of elements to write to the ring\n   * buffer. If amount is more than the number of slots available for writing,\n    * then the number of slots available for writing will be made available: no\n    * overwriting of elements can happen.\n    * @param {Function} cb A callback with two parameters, that are two typed\n    * array of the correct type, in which the data need to be copied. It is\n    * necessary to write exactly the number of elements determined by the size\n    * of the two typed arrays.\n    * @return The number of elements written to the queue.\n   */\n  writeCallback(amount, cb) {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    if ((wr + 1) % this._storage_capacity() == rd) {\n      // full\n      return 0;\n    }\n\n    let to_write = Math.min(this._available_write(rd, wr), amount);\n    let first_part = Math.min(this._storage_capacity() - wr, to_write);\n    let second_part = to_write - first_part;\n\n    // This part will cause GC: don't use in the real time thread.\n    var first_part_buf = new this._type(this.storage.buffer, 8 + wr * 4, first_part);\n    var second_part_buf = new this._type(this.storage.buffer, 8 + 0, second_part);\n\n    cb(first_part_buf, second_part_buf);\n\n    // publish the enqueued data to the other side\n    Atomics.store(\n      this.write_ptr,\n      0,\n      (wr + to_write) % this._storage_capacity()\n    );\n\n    return to_write;\n  }\n\n  /**\n   * Read up to `elements.length` elements from the ring buffer. `elements` is a typed\n   * array of the same type as passed in the ctor.\n   * Returns the number of elements read from the queue, they are placed at the\n   * beginning of the array passed as parameter.\n   * @param {TypedArray} elements An array in which the elements read from the\n   * queue will be written, starting at the beginning of the array.\n   * @param {Number} length If passed, the maximum number of elements to pop. If\n   * not passed, up to elements.length are popped.\n   * @return The number of elements read from the queue.\n   */\n  pop(elements, length) {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    if (wr == rd) {\n      return 0;\n    }\n\n    var len = length != undefined ? length : elements.length;\n\n    let to_read = Math.min(this._available_read(rd, wr), len);\n\n    let first_part = Math.min(this._storage_capacity() - rd, to_read);\n    let second_part = to_read - first_part;\n\n    this._copy(this.storage, rd, elements, 0, first_part);\n    this._copy(this.storage, 0, elements, first_part, second_part);\n\n    Atomics.store(this.read_ptr, 0, (rd + to_read) % this._storage_capacity());\n\n    return to_read;\n  }\n\n  /**\n   * @return True if the ring buffer is empty false otherwise. This can be late\n   * on the reader side: it can return true even if something has just been\n   * pushed.\n   */\n  empty() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    return wr == rd;\n  }\n\n  /**\n   * @return True if the ring buffer is full, false otherwise. This can be late\n   * on the write side: it can return true when something has just been popped.\n   */\n  full() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n\n    return (wr + 1) % this._storage_capacity() == rd;\n  }\n\n  /**\n   * @return The usable capacity for the ring buffer: the number of elements\n   * that can be stored.\n   */\n  capacity() {\n    return this._capacity - 1;\n  }\n\n  /**\n   * @return The number of elements available for reading. This can be late, and\n   * report less elements that is actually in the queue, when something has just\n   * been enqueued.\n   */\n  available_read() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n    return this._available_read(rd, wr);\n  }\n\n  /**\n   * @return The number of elements available for writing. This can be late, and\n   * report less elements that is actually available for writing, when something\n   * has just been dequeued.\n   */\n  available_write() {\n    var rd = Atomics.load(this.read_ptr, 0);\n    var wr = Atomics.load(this.write_ptr, 0);\n    return this._available_write(rd, wr);\n  }\n\n  // private methods //\n\n  /**\n   * @return Number of elements available for reading, given a read and write\n   * pointer.\n   * @private\n   */\n  _available_read(rd, wr) {\n    return (wr + this._storage_capacity() - rd) % this._storage_capacity();\n  }\n\n  /**\n   * @return Number of elements available from writing, given a read and write\n   * pointer.\n   * @private\n   */\n  _available_write(rd, wr) {\n    return this.capacity() - this._available_read(rd, wr);\n  }\n\n  /**\n   * @return The size of the storage for elements not accounting the space for\n   * the index, counting the empty slot.\n   * @private\n   */\n  _storage_capacity() {\n    return this._capacity;\n  }\n\n  /**\n   * Copy `size` elements from `input`, starting at offset `offset_input`, to\n   * `output`, starting at offset `offset_output`.\n   * @param {TypedArray} input The array to copy from\n   * @param {Number} offset_input The index at which to start the copy\n   * @param {TypedArray} output The array to copy to\n   * @param {Number} offset_output The index at which to start copying the elements to\n   * @param {Number} size The number of elements to copy\n   * @private\n   */\n  _copy(input, offset_input, output, offset_output, size) {\n    for (var i = 0; i < size; i++) {\n      output[offset_output + i] = input[offset_input + i];\n    }\n  }\n}\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"7yeQP\")).toString();","import * as Comlink from \"comlink\";\nimport { KeyEventProducer } from \"./key-event-bus\";\nimport { OptcarrotWorkerPort } from \"./optcarrot.worker\";\nimport { RingBuffer } from \"ringbuf.js\"\n\nif (\"serviceWorker\" in navigator) {\n  // Register service worker\n  // @ts-ignore\n  navigator.serviceWorker.register(new URL(\"./sw.js\", import.meta.url)).then(\n    function (registration) {\n      console.log(\"COOP/COEP Service Worker registered\", registration.scope);\n      // If the registration is active, but it's not controlling the page\n      if (registration.active && !navigator.serviceWorker.controller) {\n          window.location.reload();\n      }\n    },\n    function (err) {\n      console.log(\"COOP/COEP Service Worker failed to register\", err);\n    }\n  );\n} else {\n  console.warn(\"Cannot register a service worker\");\n}\n\nconst optcarrot = Comlink.wrap<OptcarrotWorkerPort>(\n  // @ts-ignore\n  new Worker(new URL(\"optcarrot.worker.ts\", import.meta.url), {\n    type: \"module\",\n  })\n);\n\nclass NESView {\n    canvasContext: CanvasRenderingContext2D;\n    scalingCanvas: HTMLCanvasElement;\n    scalingContext: CanvasRenderingContext2D;\n\n    constructor(canvas: HTMLCanvasElement) {\n        this.canvasContext = canvas.getContext(\"2d\");\n        this.scalingCanvas = document.createElement('canvas') as HTMLCanvasElement;\n        this.scalingCanvas.width = canvas.width;\n        this.scalingCanvas.height = canvas.height;\n        this.scalingContext = this.scalingCanvas.getContext(\"2d\");\n        this.canvasContext.scale(2, 2);\n    }\n\n    draw(bytes: Uint8Array) {\n        const rgba = new Uint8ClampedArray(bytes.buffer);\n        const image = new ImageData(rgba, 256, 240);\n        this.scalingContext.putImageData(image, 0, 0);\n        this.canvasContext.drawImage(this.scalingCanvas, 0, 0);\n    }\n}\n\nclass NESAudio {\n    context: AudioContext;\n    scheduledTime: number;\n\n    constructor() {\n        this.context = new AudioContext({ sampleRate: 11050 });\n        this.scheduledTime = 0;\n    }\n\n    push(input: Int16Array) {\n        const buffer = this.context.createBuffer(1, input.length, this.context.sampleRate);\n        const bufferSrc = this.context.createBufferSource();\n        const bufferData = buffer.getChannelData(0);\n        const currentTime = this.context.currentTime;\n        for (let i = 0; i < input.length; i++) {\n            bufferData[i] = input[i] / (2 << 15);\n        }\n        bufferSrc.buffer = buffer;\n        bufferSrc.connect(this.context.destination);\n        if (currentTime < this.scheduledTime) {\n            bufferSrc.start(this.scheduledTime);\n            this.scheduledTime += buffer.duration;\n        } else {\n            console.warn(\"Audio buffer underrun :(\", this.scheduledTime - currentTime);\n            bufferSrc.start(currentTime);\n            this.scheduledTime = currentTime + buffer.duration;\n        }\n    }\n}\n\nclass FpsCounter {\n    times: number[];\n    constructor() {\n        this.times = [];\n    }\n    tick(): number {\n        const now = performance.now();\n        while (this.times.length > 0 && this.times[0] <= now - 1000) {\n          this.times.shift();\n        }\n        this.times.push(now);\n        return this.times.length;\n    }\n}\n\nconst padCodeFromKey = (key: string) => {\n    switch (key) {\n        case \"KeyA\": return 0x0;\n        case \"KeyB\": return 0x1;\n        // case \"SELECT\": return 0x2; // select\n        // case \"START\": return 0x3; // select\n        case \"ArrowUp\": return 0x04;\n        case \"ArrowDown\": return 0x05;\n        case \"ArrowLeft\": return 0x06;\n        case \"ArrowRight\": return 0x07;\n        default: return null;\n    }\n}\n\nconst play = async () => {\n    const nesView = new NESView(document.getElementById(\"nes-video\") as HTMLCanvasElement);\n    const keyEventBuffer = RingBuffer.getStorageForCapacity(1024, Uint8Array);\n    const keyEventProducer = new KeyEventProducer(new RingBuffer(keyEventBuffer, Uint8Array));\n    let nesAudio = null;\n\n    console.log(\"Initializing Optcarrot...\");\n\n    const fps = new FpsCounter();\n    const fpsIndicator = document.getElementById(\"fps-indicator\");\n    const isAudioEnabledCheckbox = document.getElementById(\"audio-enabled\") as HTMLInputElement;\n    let audioEnabled = isAudioEnabledCheckbox.checked;\n\n    isAudioEnabledCheckbox.onclick = () => {\n        audioEnabled = isAudioEnabledCheckbox.checked;\n    }\n    document.addEventListener(\"keydown\", (event) => {\n        const code = padCodeFromKey(event.key);\n        if (code !== null) {\n            keyEventProducer.push(code, true);\n        }\n    });\n\n    document.addEventListener(\"keyup\", (event) => {\n        const code = padCodeFromKey(event.key);\n        if (code !== null) {\n            keyEventProducer.push(code, false);\n        }\n    });\n\n    optcarrot.init(\n      // render\n      Comlink.proxy((bytes) => {\n        nesView.draw(bytes);\n        fpsIndicator.innerText = fps.tick().toString();\n      }),\n      // playAudio\n      Comlink.proxy((bytes) => {\n        if (!audioEnabled) return;\n        if (nesAudio === null) {\n            nesAudio = new NESAudio()\n        }\n        nesAudio.push(bytes);\n      }),\n      keyEventProducer.buffer.buf\n    );\n}\n\nplay()\n// document.getElementById(\"play-button\").addEventListener(\"click\", play);\n","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"3YKzz\"));\nmodule.exports = workerURL(url.toString(), url.origin, true);"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$0e112480d1414235$export$be5234c0b764b6e0","Symbol","val","$0e112480d1414235$export$ab8f1c00731ee83e","Map","$0e112480d1414235$var$isObject","serialize","obj","port1","port2","MessageChannel","port","value","$0e112480d1414235$var$throwMarker","serialized","isError","message","name","stack","assign","obj1","ep","self","callback","ev","data","type","path","argumentList","map","$0e112480d1414235$var$fromWireValue","slice","reduce","prop","rawValue","returnValue1","apply","parent","$0e112480d1414235$export$9b7f6e342a8cbd38","transfers","$0e112480d1414235$var$transferCache","set","undefined","value1","Promise","resolve","catch","then","returnValue","wireValue","transferables","$0e112480d1414235$var$toWireValue","postMessage","removeEventListener","$0e112480d1414235$var$closeEndPoint","start","endpoint","constructor","close","target","isReleased","Proxy","isProxyReleased","$0e112480d1414235$var$requestResponseMessage","p","toString","r","bind","_target","$0e112480d1414235$var$throwIfProxyReleased","_thisArg","rawArgumentList","last","$0e112480d1414235$export$39fb953702b7fcd7","$0e112480d1414235$var$createProxy","$0e112480d1414235$var$processArguments","construct","$0e112480d1414235$export$923f96dd5afa9ce6","processed","v","arr","Array","prototype","concat","WeakMap","handler","canHandle","serializedValue","get","deserialize","msg","$ca3da48d962b5339$export$40f9f4a9be7b0e95","buffer","this","push","code","pressed","Uint8Array","$0eb8057ea2a7f6b6$export$575ef0eeec6e42f5","static","capacity","BYTES_PER_ELEMENT","bytes","SharedArrayBuffer","sab","ArrayBuffer","__proto__","isPrototypeOf","_type","_capacity","byteLength","buf","write_ptr","Uint32Array","read_ptr","storage","elements","rd","Atomics","load","wr","_storage_capacity","len","to_write","Math","min","_available_write","first_part","second_part","_copy","store","writeCallback","amount","cb","pop","to_read","_available_read","empty","full","available_read","available_write","input","offset_input","output","offset_output","size","$5be96276450209d0$exports","URL","import","meta","url","navigator","serviceWorker","registration","console","log","scope","active","controller","window","location","reload","err","warn","$56b621a6dd25b2cb$exports","workerUrl","origin","isESM","source","stringify","createObjectURL","Blob","$f5e58b70d10edcb4$var$url","$f5e58b70d10edcb4$exports","$b4e14b6b8da86996$var$optcarrot","$0e112480d1414235$export$4997ffc0176396a6","Worker","$b4e14b6b8da86996$var$NESView","canvas","canvasContext","getContext","scalingCanvas","document","createElement","width","height","scalingContext","scale","draw","rgba","Uint8ClampedArray","image","ImageData","putImageData","drawImage","$b4e14b6b8da86996$var$NESAudio","context","AudioContext","sampleRate","scheduledTime","createBuffer","bufferSrc","createBufferSource","bufferData","getChannelData","currentTime","connect","destination","duration","$b4e14b6b8da86996$var$FpsCounter","times","tick","now","performance","shift","$b4e14b6b8da86996$var$padCodeFromKey","key","async","nesView","getElementById","keyEventBuffer","getStorageForCapacity","keyEventProducer","nesAudio","fps","fpsIndicator","isAudioEnabledCheckbox","audioEnabled","checked","onclick","addEventListener","event","init","innerText","$b4e14b6b8da86996$var$play"],"version":3,"file":"index.c98e093b.js.map"}